/* generated by rust_qt_binding_generator */
#include "Tree.h"

namespace {
    struct qbytearray_t {
    private:
        const char* data;
        int len;
    public:
        qbytearray_t(const QByteArray& v):
            data(v.data()),
            len(v.size()) {
        }
        operator QByteArray() const {
            return QByteArray(data, len);
        }
    };
    struct qstring_t {
    private:
        const void* data;
        int len;
    public:
        qstring_t(const QString& v):
            data(static_cast<const void*>(v.utf16())),
            len(v.size()) {
        }
        operator QString() const {
            return QString::fromUtf8(static_cast<const char*>(data), len);
        }
    };
    struct qmodelindex_t {
        int row;
        quintptr id;
    };
}
typedef void (*qstring_set)(QString*, qstring_t*);
void set_qstring(QString* v, qstring_t* val) {
    *v = *val;
}
typedef void (*qbytearray_set)(QByteArray*, qbytearray_t*);
void set_qbytearray(QByteArray* v, qbytearray_t* val) {
    *v = *val;
}

extern "C" {
    Tree::Private* tree_new(Tree*, void (*)(Tree*),
        void (*)(const Tree*, int, quintptr),
        void (*)(Tree*),
        void (*)(Tree*),
        void (*)(Tree*, int, quintptr, int, int),
        void (*)(Tree*),
        void (*)(Tree*, int, quintptr, int, int),
        void (*)(Tree*));
    void tree_free(Tree::Private*);
    void tree_path_get(const Tree::Private*, QString*, qstring_set);
    void tree_path_set(Tree::Private*, qstring_t);
    void tree_path_set_none(Tree::Private*);
};
Tree::Tree(QObject *parent):
    QAbstractItemModel(parent),
    d(tree_new(this,
        [](Tree* o) { emit o->pathChanged(); },
        [](const Tree* o, int row, quintptr id) {
            emit o->newDataReady(o->createIndex(row, 0, id));
        },
        [](Tree* o) {
            o->beginResetModel();
        },
        [](Tree* o) {
            o->endResetModel();
        },
        [](Tree* o, int row, quintptr id, int first, int last) {
            o->beginInsertRows(o->createIndex(row, 0, id), first, last);
        },
        [](Tree* o) {
            o->endInsertRows();
        },
        [](Tree* o, int row, quintptr id, int first, int last) {
            o->beginRemoveRows(o->createIndex(row, 0, id), first, last);
        },
        [](Tree* o) {
            o->endRemoveRows();
        }
    )) {
    connect(this, &Tree::newDataReady, this, [this](const QModelIndex& i) {
        fetchMore(i);
    }, Qt::QueuedConnection);
}


Tree::~Tree() {
    tree_free(d);
}
QString Tree::path() const
{
    QString v;
    tree_path_get(d, &v, set_qstring);
    return v;
}
void Tree::setPath(const QString& v) {
    if (v.isNull()) {
        tree_path_set_none(d);
    } else {
        tree_path_set(d, v);
    }
}
extern "C" {
    void tree_data_file_name(const Tree::Private*, int, quintptr, QString*, qstring_set);
    void tree_data_file_icon(const Tree::Private*, int, quintptr, QByteArray*, qbytearray_set);
    void tree_data_file_path(const Tree::Private*, int, quintptr, QString*, qstring_set);
    qint32 tree_data_file_permissions(const Tree::Private*, int, quintptr);
    qint32 tree_data_file_type(const Tree::Private*, int, quintptr);
    quint64 tree_data_file_size(const Tree::Private*, int, quintptr);
    void tree_sort(Tree::Private*, int column, Qt::SortOrder order = Qt::AscendingOrder);

    int tree_row_count(const Tree::Private*, int, quintptr);
    bool tree_can_fetch_more(const Tree::Private*, int, quintptr);
    void tree_fetch_more(Tree::Private*, int, quintptr);
    quintptr tree_index(const Tree::Private*, int, quintptr);
    qmodelindex_t tree_parent(const Tree::Private*, quintptr);
}
int Tree::columnCount(const QModelIndex &) const
{
    return 5;
}

bool Tree::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Tree::rowCount(const QModelIndex &parent) const
{
    if (parent.isValid() && parent.column() != 0) {
        return 0;
    }
    return tree_row_count(d, parent.row(), parent.internalId());
}

QModelIndex Tree::index(int row, int column, const QModelIndex &parent) const
{
    if (row < 0 || column < 0 || column >= 5) {
        return QModelIndex();
    }
    if (parent.isValid() && parent.column() != 0) {
        return QModelIndex();
    }
    const quintptr id = tree_index(d, parent.row(), parent.internalId());
    return createIndex(row, column, id);
}

QModelIndex Tree::parent(const QModelIndex &index) const
{
    if (!index.isValid()) {
        return QModelIndex();
    }
    const qmodelindex_t parent = tree_parent(d, index.internalId());
    return parent.id ?createIndex(parent.row, 0, parent.id) :QModelIndex();
}

bool Tree::canFetchMore(const QModelIndex &parent) const
{
    if (parent.isValid() && parent.column() != 0) {
        return false;
    }
    return tree_can_fetch_more(d, parent.row(), parent.internalId());
}

void Tree::fetchMore(const QModelIndex &parent)
{
    tree_fetch_more(d, parent.row(), parent.internalId());
}

void Tree::sort(int column, Qt::SortOrder order)
{
    tree_sort(d, column, order);
}
Qt::ItemFlags Tree::flags(const QModelIndex &i) const
{
    return QAbstractItemModel::flags(i);
}
QVariant Tree::data(const QModelIndex &index, int role) const
{
    QVariant v;
    QString s;
    QByteArray b;
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::DisplayRole:
            tree_data_file_name(d, index.row(), index.internalId(), &s, set_qstring);
            v.setValue<QString>(s);
            break;
        case Qt::DecorationRole:
            tree_data_file_icon(d, index.row(), index.internalId(), &b, set_qbytearray);
            v.setValue<QByteArray>(b);
            break;
        case Qt::UserRole + 1:
            tree_data_file_path(d, index.row(), index.internalId(), &s, set_qstring);
            v.setValue<QString>(s);
            break;
        case Qt::UserRole + 2:
            tree_data_file_name(d, index.row(), index.internalId(), &s, set_qstring);
            v.setValue<QString>(s);
            break;
        case Qt::UserRole + 3:
            v.setValue<qint32>(tree_data_file_permissions(d, index.row(), index.internalId()));
            break;
        case Qt::UserRole + 4:
            v.setValue<qint32>(tree_data_file_type(d, index.row(), index.internalId()));
            break;
        case Qt::UserRole + 5:
            v.setValue<quint64>(tree_data_file_size(d, index.row(), index.internalId()));
            break;
        }
        break;
    case 1:
        switch (role) {
        case Qt::DisplayRole:
            tree_data_file_path(d, index.row(), index.internalId(), &s, set_qstring);
            v.setValue<QString>(s);
            break;
        }
        break;
    case 2:
        switch (role) {
        case Qt::DisplayRole:
            v.setValue<qint32>(tree_data_file_permissions(d, index.row(), index.internalId()));
            break;
        }
        break;
    case 3:
        switch (role) {
        case Qt::DisplayRole:
            v.setValue<qint32>(tree_data_file_type(d, index.row(), index.internalId()));
            break;
        }
        break;
    case 4:
        switch (role) {
        case Qt::DisplayRole:
            v.setValue<quint64>(tree_data_file_size(d, index.row(), index.internalId()));
            break;
        }
        break;
    }
    return v;
}
QHash<int, QByteArray> Tree::roleNames() const {
    QHash<int, QByteArray> names;
    names.insert(Qt::DisplayRole, "fileName");
    names.insert(Qt::DecorationRole, "fileIcon");
    names.insert(Qt::UserRole + 1, "filePath");
    names.insert(Qt::UserRole + 3, "filePermissions");
    names.insert(Qt::UserRole + 4, "fileType");
    names.insert(Qt::UserRole + 5, "fileSize");
    return names;
}

