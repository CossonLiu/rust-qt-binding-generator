/* generated by rust_qt_binding_generator */
#ifndef TREE_H
#define TREE_H

#include <QObject>
#include <QAbstractItemModel>

class TreeInterface;
class Tree : public QAbstractItemModel
{
    Q_OBJECT
    TreeInterface * const d;
    Q_PROPERTY(QString path READ path WRITE setPath NOTIFY pathChanged FINAL)
public:
    explicit Tree(QObject *parent = nullptr);
    ~Tree();
    QString path() const;
    void setPath(const QString& v);

    int columnCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const override;
    QModelIndex parent(const QModelIndex &index) const override;
    bool hasChildren(const QModelIndex &parent = QModelIndex()) const override;
    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    bool canFetchMore(const QModelIndex &parent) const override;
    void fetchMore(const QModelIndex &parent) override;
    QHash<int, QByteArray> roleNames() const override;
signals:
    // new data is ready to be made available to the model with fetchMore()
    void newDataReady(const QModelIndex &parent) const;
signals:
    void pathChanged();
private:
    QString m_path;
};
#endif // TREE_H
