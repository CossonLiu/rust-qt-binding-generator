/* generated by rust_qt_binding_generator */
#include "TimeSeries.h"

namespace {
    template <typename T>
    struct option {
    public:
        T value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant(value);
            }
            return QVariant();
        }
    };
    struct qbytearray_t {
    private:
        const char* data;
        int len;
    public:
        qbytearray_t(const QByteArray& v):
            data(v.data()),
            len(v.size()) {
        }
        operator QByteArray() const {
            return QByteArray(data, len);
        }
    };
    struct qstring_t {
    private:
        const void* data;
        int len;
    public:
        qstring_t(const QString& v):
            data(static_cast<const void*>(v.utf16())),
            len(v.size()) {
        }
        operator QString() const {
            return QString::fromUtf8(static_cast<const char*>(data), len);
        }
    };
    struct qmodelindex_t {
        int row;
        quintptr id;
    };

}
typedef void (*qstring_set)(QString*, qstring_t*);
void set_qstring(QString* v, qstring_t* val) {
    *v = *val;
}
typedef void (*qbytearray_set)(QByteArray*, qbytearray_t*);
void set_qbytearray(QByteArray* v, qbytearray_t* val) {
    *v = *val;
}
extern "C" {
    uint time_series_data_input(const TimeSeries::Private*, int);
    bool time_series_set_data_input(TimeSeries::Private*, int, uint);
    uint time_series_data_result(const TimeSeries::Private*, int);
    bool time_series_set_data_result(TimeSeries::Private*, int, uint);
    void time_series_sort(TimeSeries::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int time_series_row_count(const TimeSeries::Private*);
    bool time_series_can_fetch_more(const TimeSeries::Private*);
    void time_series_fetch_more(TimeSeries::Private*);
}
int TimeSeries::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 2;
}

bool TimeSeries::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int TimeSeries::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : time_series_row_count(m_d);
}

QModelIndex TimeSeries::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 2) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex TimeSeries::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool TimeSeries::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : time_series_can_fetch_more(m_d);
}

void TimeSeries::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        time_series_fetch_more(m_d);
    }
}

void TimeSeries::sort(int column, Qt::SortOrder order)
{
    time_series_sort(m_d, column, order);
}
Qt::ItemFlags TimeSeries::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    if (i.column() == 0) {
        flags |= Qt::ItemIsEditable;
    }
    if (i.column() == 1) {
        flags |= Qt::ItemIsEditable;
    }
    return flags;
}
QVariant TimeSeries::data(const QModelIndex &index, int role) const
{
    QVariant v;
    Q_ASSERT(rowCount(index.parent()) > index.row());
    QString s;
    QByteArray b;
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::DisplayRole:
        case Qt::EditRole:
        case Qt::UserRole + 0:
            v = time_series_data_input(m_d, index.row());
            break;
        case Qt::UserRole + 1:
            v = time_series_data_result(m_d, index.row());
            break;
        }
        break;
    case 1:
        switch (role) {
        case Qt::DisplayRole:
        case Qt::EditRole:
        case Qt::UserRole + 1:
            v = time_series_data_result(m_d, index.row());
            break;
        }
        break;
    }
    return v;
}
QHash<int, QByteArray> TimeSeries::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "input");
    names.insert(Qt::UserRole + 1, "result");
    return names;
}
bool TimeSeries::setData(const QModelIndex &index, const QVariant &value, int role)
{
    bool set = false;
    if (index.column() == 0) {
        if (role == Qt::DisplayRole || role == Qt::EditRole || role == Qt::UserRole + 0) {
            set = time_series_set_data_input(m_d, index.row(), value.value<quint32>());
        }
        if (role == Qt::UserRole + 1) {
            set = time_series_set_data_result(m_d, index.row(), value.value<quint32>());
        }
    }
    if (index.column() == 1) {
        if (role == Qt::DisplayRole || role == Qt::EditRole || role == Qt::UserRole + 1) {
            set = time_series_set_data_result(m_d, index.row(), value.value<quint32>());
        }
    }
    if (set) {
        emit dataChanged(index, index, QVector<int>() << role);
    }
    return set;
}
extern "C" {
    TimeSeries::Private* time_series_new(TimeSeries*,
        void (*)(const TimeSeries*),
        void (*)(TimeSeries*, quintptr, quintptr),
        void (*)(TimeSeries*),
        void (*)(TimeSeries*),
        void (*)(TimeSeries*, int, int),
        void (*)(TimeSeries*),
        void (*)(TimeSeries*, int, int),
        void (*)(TimeSeries*));
    void time_series_free(TimeSeries::Private*);
};

TimeSeries::TimeSeries(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(0),
    m_ownsPrivate(false)
{
}

TimeSeries::TimeSeries(QObject *parent):
    QAbstractItemModel(parent),
    m_d(time_series_new(this,
        [](const TimeSeries* o) {
            emit o->newDataReady(QModelIndex());
        },
        [](TimeSeries* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 1, last));
        },
        [](TimeSeries* o) {
            o->beginResetModel();
        },
        [](TimeSeries* o) {
            o->endResetModel();
        },
        [](TimeSeries* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](TimeSeries* o) {
            o->endInsertRows();
        },
        [](TimeSeries* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](TimeSeries* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &TimeSeries::newDataReady, this, [this](const QModelIndex& i) {
        fetchMore(i);
    }, Qt::QueuedConnection);
}

TimeSeries::~TimeSeries() {
    if (m_ownsPrivate) {
        time_series_free(m_d);
    }
}
