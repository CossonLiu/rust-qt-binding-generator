/* generated by rust_qt_binding_generator */
#ifndef TEST_OBJECT_TYPES_RUST_H
#define TEST_OBJECT_TYPES_RUST_H

#include <QObject>
#include <QAbstractItemModel>

class Object : public QObject
{
    Q_OBJECT
public:
    class Private;
private:
    Private * const d;
    Q_PROPERTY(bool boolean READ boolean WRITE setBoolean NOTIFY booleanChanged FINAL)
    Q_PROPERTY(qint32 integer READ integer WRITE setInteger NOTIFY integerChanged FINAL)
    Q_PROPERTY(quint32 uinteger READ uinteger WRITE setUinteger NOTIFY uintegerChanged FINAL)
    Q_PROPERTY(quint64 u64 READ u64 WRITE setU64 NOTIFY u64Changed FINAL)
    Q_PROPERTY(QString string READ string WRITE setString NOTIFY stringChanged FINAL)
    Q_PROPERTY(QByteArray bytearray READ bytearray WRITE setBytearray NOTIFY bytearrayChanged FINAL)
public:
    explicit Object(QObject *parent = nullptr);
    ~Object();
    bool boolean() const;
    void setBoolean(bool v);
    qint32 integer() const;
    void setInteger(qint32 v);
    quint32 uinteger() const;
    void setUinteger(uint v);
    quint64 u64() const;
    void setU64(quint64 v);
    QString string() const;
    void setString(const QString& v);
    QByteArray bytearray() const;
    void setBytearray(const QByteArray& v);
signals:
    void booleanChanged();
    void integerChanged();
    void uintegerChanged();
    void u64Changed();
    void stringChanged();
    void bytearrayChanged();
private:
    bool m_boolean;
    qint32 m_integer;
    quint32 m_uinteger;
    quint64 m_u64;
    QString m_string;
    QByteArray m_bytearray;
};
#endif // TEST_OBJECT_TYPES_RUST_H
