/* generated by rust_qt_binding_generator */
#include "test_list_rust.h"

namespace {
    template <typename T>
    struct option {
    public:
        T value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant(value);
            }
            return QVariant();
        }
    };
    struct qbytearray_t {
    private:
        const char* data;
        int len;
    public:
        qbytearray_t(const QByteArray& v):
            data(v.data()),
            len(v.size()) {
        }
        operator QByteArray() const {
            return QByteArray(data, len);
        }
    };
    struct qstring_t {
    private:
        const void* data;
        int len;
    public:
        qstring_t(const QString& v):
            data(static_cast<const void*>(v.utf16())),
            len(v.size()) {
        }
        operator QString() const {
            return QString::fromUtf8(static_cast<const char*>(data), len);
        }
    };
    struct qmodelindex_t {
        int row;
        quintptr id;
    };

}
typedef void (*qstring_set)(QString*, qstring_t*);
void set_qstring(QString* v, qstring_t* val) {
    *v = *val;
}
typedef void (*qbytearray_set)(QByteArray*, qbytearray_t*);
void set_qbytearray(QByteArray* v, qbytearray_t* val) {
    *v = *val;
}
extern "C" {
    void persons_data_user_name(const Persons::Private*, int, QString*, qstring_set);
    bool persons_set_data_user_name(Persons::Private*, int, qstring_t);
    void persons_sort(Persons::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int persons_row_count(const Persons::Private*);
    bool persons_can_fetch_more(const Persons::Private*);
    void persons_fetch_more(Persons::Private*);
}
int Persons::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Persons::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Persons::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : persons_row_count(m_d);
}

QModelIndex Persons::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Persons::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Persons::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : persons_can_fetch_more(m_d);
}

void Persons::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        persons_fetch_more(m_d);
    }
}

void Persons::sort(int column, Qt::SortOrder order)
{
    persons_sort(m_d, column, order);
}
Qt::ItemFlags Persons::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    if (i.column() == 0) {
        flags |= Qt::ItemIsEditable;
    }
    return flags;
}
QVariant Persons::userName(int row) const
{
    QVariant v;
    QString s;
    persons_data_user_name(m_d, row, &s, set_qstring);
    if (!s.isNull()) v.setValue<QString>(s);
    return v;
}

QVariant Persons::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::DisplayRole:
        case Qt::EditRole:
        case Qt::UserRole + 0:
            return userName(index.row());
        }
    }
    return QVariant();
}
QHash<int, QByteArray> Persons::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "userName");
    return names;
}
QVariant Persons::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Persons::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

bool Persons::setData(const QModelIndex &index, const QVariant &value, int role)
{
    bool set = false;
    if (index.column() == 0) {
        if (role == Qt::DisplayRole || role == Qt::EditRole || role == Qt::UserRole + 0) {
            set = persons_set_data_user_name(m_d, index.row(), value.value<QString>());
        }
    }
    if (set) {
        emit dataChanged(index, index, QVector<int>() << role);
    }
    return set;
}
extern "C" {
    Persons::Private* persons_new(Persons*,
        void (*)(const Persons*),
        void (*)(Persons*, quintptr, quintptr),
        void (*)(Persons*),
        void (*)(Persons*),
        void (*)(Persons*, int, int),
        void (*)(Persons*),
        void (*)(Persons*, int, int),
        void (*)(Persons*));
    void persons_free(Persons::Private*);
};

Persons::Persons(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(0),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Persons::Persons(QObject *parent):
    QAbstractItemModel(parent),
    m_d(persons_new(this,
        [](const Persons* o) {
            emit o->newDataReady(QModelIndex());
        },
        [](Persons* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Persons* o) {
            o->beginResetModel();
        },
        [](Persons* o) {
            o->endResetModel();
        },
        [](Persons* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Persons* o) {
            o->endInsertRows();
        },
        [](Persons* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Persons* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Persons::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Persons::~Persons() {
    if (m_ownsPrivate) {
        persons_free(m_d);
    }
}
void Persons::initHeaderData() {
    m_headerData.insert(qMakePair(0, Qt::DisplayRole), QVariant("userName"));
    }
