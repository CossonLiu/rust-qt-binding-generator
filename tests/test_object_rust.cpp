/* generated by rust_qt_binding_generator */
#include "test_object_rust.h"

namespace {

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }
    inline void personUserNameChanged(Person* o)
    {
        emit o->userNameChanged();
    }
}
extern "C" {
    Person::Private* person_new(Person*, void (*)(Person*));
    void person_free(Person::Private*);
    void person_user_name_get(const Person::Private*, QString*, qstring_set);
    void person_user_name_set(Person::Private*, const ushort *str, int len);
};

Person::Person(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

Person::Person(QObject *parent):
    QObject(parent),
    m_d(person_new(this,
        personUserNameChanged)),
    m_ownsPrivate(true)
{
}

Person::~Person() {
    if (m_ownsPrivate) {
        person_free(m_d);
    }
}
QString Person::userName() const
{
    QString v;
    person_user_name_get(m_d, &v, set_qstring);
    return v;
}
void Person::setUserName(const QString& v) {
    person_user_name_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
}
