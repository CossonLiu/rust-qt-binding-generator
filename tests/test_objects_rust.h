/* generated by rust_qt_binding_generator */
#ifndef TEST_OBJECTS_RUST_H
#define TEST_OBJECTS_RUST_H

#include <QObject>
#include <QAbstractItemModel>

class Group;
class InnerObject;
class Person;

class Group : public QObject
{
    Q_OBJECT
    friend class Person;
public:
    class Private;
private:
    Person* const m_person;
    Private * m_d;
    bool m_ownsPrivate;
    Q_PROPERTY(Person* person READ person NOTIFY personChanged FINAL)
    explicit Group(bool owned, QObject *parent);
public:
    explicit Group(QObject *parent = nullptr);
    ~Group();
    const Person* person() const;
    Person* person();
signals:
    void personChanged();
};

class InnerObject : public QObject
{
    Q_OBJECT
    friend class Group;
    friend class Person;
public:
    class Private;
private:
    Private * m_d;
    bool m_ownsPrivate;
    Q_PROPERTY(QString description READ description WRITE setDescription NOTIFY descriptionChanged FINAL)
    explicit InnerObject(bool owned, QObject *parent);
public:
    explicit InnerObject(QObject *parent = nullptr);
    ~InnerObject();
    QString description() const;
    void setDescription(const QString& v);
signals:
    void descriptionChanged();
};

class Person : public QObject
{
    Q_OBJECT
    friend class Group;
public:
    class Private;
private:
    InnerObject* const m_object;
    Private * m_d;
    bool m_ownsPrivate;
    Q_PROPERTY(InnerObject* object READ object NOTIFY objectChanged FINAL)
    explicit Person(bool owned, QObject *parent);
public:
    explicit Person(QObject *parent = nullptr);
    ~Person();
    const InnerObject* object() const;
    InnerObject* object();
signals:
    void objectChanged();
};
#endif // TEST_OBJECTS_RUST_H
