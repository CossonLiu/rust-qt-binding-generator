/* generated by rust_qt_binding_generator */
#include "test_object_types_rust.h"

namespace {

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }

    typedef void (*qbytearray_set)(QByteArray* val, const char* bytes, int nbytes);
    void set_qbytearray(QByteArray* v, const char* bytes, int nbytes) {
        v->truncate(0);
        v->append(bytes, nbytes);
    }
    inline void objectBooleanChanged(Object* o)
    {
        emit o->booleanChanged();
    }
    inline void objectBytearrayChanged(Object* o)
    {
        emit o->bytearrayChanged();
    }
    inline void objectIntegerChanged(Object* o)
    {
        emit o->integerChanged();
    }
    inline void objectOptionalBytearrayChanged(Object* o)
    {
        emit o->optionalBytearrayChanged();
    }
    inline void objectOptionalStringChanged(Object* o)
    {
        emit o->optionalStringChanged();
    }
    inline void objectStringChanged(Object* o)
    {
        emit o->stringChanged();
    }
    inline void objectU64Changed(Object* o)
    {
        emit o->u64Changed();
    }
    inline void objectUintegerChanged(Object* o)
    {
        emit o->uintegerChanged();
    }
}
extern "C" {
    Object::Private* object_new(Object*, void (*)(Object*), void (*)(Object*), void (*)(Object*), void (*)(Object*), void (*)(Object*), void (*)(Object*), void (*)(Object*), void (*)(Object*));
    void object_free(Object::Private*);
    bool object_boolean_get(const Object::Private*);
    void object_boolean_set(Object::Private*, bool);
    void object_bytearray_get(const Object::Private*, QByteArray*, qbytearray_set);
    void object_bytearray_set(Object::Private*, const char* bytes, int len);
    qint32 object_integer_get(const Object::Private*);
    void object_integer_set(Object::Private*, qint32);
    void object_optional_bytearray_get(const Object::Private*, QByteArray*, qbytearray_set);
    void object_optional_bytearray_set(Object::Private*, const char* bytes, int len);
    void object_optional_bytearray_set_none(Object::Private*);
    void object_optional_string_get(const Object::Private*, QString*, qstring_set);
    void object_optional_string_set(Object::Private*, const ushort *str, int len);
    void object_optional_string_set_none(Object::Private*);
    void object_string_get(const Object::Private*, QString*, qstring_set);
    void object_string_set(Object::Private*, const ushort *str, int len);
    quint64 object_u64_get(const Object::Private*);
    void object_u64_set(Object::Private*, quint64);
    quint32 object_uinteger_get(const Object::Private*);
    void object_uinteger_set(Object::Private*, uint);
};

Object::Object(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(0),
    m_ownsPrivate(false)
{
}

Object::Object(QObject *parent):
    QObject(parent),
    m_d(object_new(this,
        objectBooleanChanged,
        objectBytearrayChanged,
        objectIntegerChanged,
        objectOptionalBytearrayChanged,
        objectOptionalStringChanged,
        objectStringChanged,
        objectU64Changed,
        objectUintegerChanged)),
    m_ownsPrivate(true)
{
}

Object::~Object() {
    if (m_ownsPrivate) {
        object_free(m_d);
    }
}
bool Object::boolean() const
{
    return object_boolean_get(m_d);
}
void Object::setBoolean(bool v) {
    object_boolean_set(m_d, v);
}
QByteArray Object::bytearray() const
{
    QByteArray v;
    object_bytearray_get(m_d, &v, set_qbytearray);
    return v;
}
void Object::setBytearray(const QByteArray& v) {
    object_bytearray_set(m_d, v.data(), v.size());
}
qint32 Object::integer() const
{
    return object_integer_get(m_d);
}
void Object::setInteger(qint32 v) {
    object_integer_set(m_d, v);
}
QByteArray Object::optionalBytearray() const
{
    QByteArray v;
    object_optional_bytearray_get(m_d, &v, set_qbytearray);
    return v;
}
void Object::setOptionalBytearray(const QByteArray& v) {
    if (v.isNull()) {
        object_optional_bytearray_set_none(m_d);
    } else {
    object_optional_bytearray_set(m_d, v.data(), v.size());
    }
}
QString Object::optionalString() const
{
    QString v;
    object_optional_string_get(m_d, &v, set_qstring);
    return v;
}
void Object::setOptionalString(const QString& v) {
    if (v.isNull()) {
        object_optional_string_set_none(m_d);
    } else {
    object_optional_string_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
    }
}
QString Object::string() const
{
    QString v;
    object_string_get(m_d, &v, set_qstring);
    return v;
}
void Object::setString(const QString& v) {
    object_string_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
}
quint64 Object::u64() const
{
    return object_u64_get(m_d);
}
void Object::setU64(quint64 v) {
    object_u64_set(m_d, v);
}
quint32 Object::uinteger() const
{
    return object_uinteger_get(m_d);
}
void Object::setUinteger(uint v) {
    object_uinteger_set(m_d, v);
}
