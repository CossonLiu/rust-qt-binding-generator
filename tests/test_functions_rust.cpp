/* generated by rust_qt_binding_generator */
#include "test_functions_rust.h"

namespace {
    template <typename T>
    inline T to_rust(T t) { return t; }

    extern "C" {
        struct qstring_t {
            const void* data;
            int len;
        };
    }
    static_assert(std::is_pod<qstring_t>::value, "qstring_t must be a POD type.");
    qstring_t to_rust(const QString& v) {
        return qstring_t {
            .data = static_cast<const void*>(v.data()),
            .len = v.size()
        };
    }
    typedef void (*qstring_set)(QString*, qstring_t*);
    void set_qstring(QString* v, qstring_t* val) {
        *v = QString::fromUtf8(static_cast<const char*>(val->data), val->len);
    }
    inline void personUserNameChanged(Person* o)
    {
        emit o->userNameChanged();
    }
}
extern "C" {
    Person::Private* person_new(Person*, void (*)(Person*));
    void person_free(Person::Private*);
    void person_user_name_get(const Person::Private*, QString*, qstring_set);
    void person_user_name_set(Person::Private*, qstring_t);
    void person_double_name(Person::Private*);
    qstring_t person_greet(const Person::Private*, qstring_t, QString*, qstring_set);
    quint8 person_vowels_in_name(const Person::Private*);
};

Person::Person(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(0),
    m_ownsPrivate(false)
{
}

Person::Person(QObject *parent):
    QObject(parent),
    m_d(person_new(this,
        personUserNameChanged)),
    m_ownsPrivate(true)
{
}

Person::~Person() {
    if (m_ownsPrivate) {
        person_free(m_d);
    }
}
QString Person::userName() const
{
    QString v;
    person_user_name_get(m_d, &v, set_qstring);
    return v;
}
void Person::setUserName(const QString& v) {
    person_user_name_set(m_d, to_rust(v));
}
void Person::doubleName()
{
    return person_double_name(m_d);
}
QString Person::greet(const QString& Name) const
{
    QString s;
    person_greet(m_d, to_rust(Name), &s, set_qstring);
    return s;
}
quint8 Person::vowelsInName() const
{
    return person_vowels_in_name(m_d);
}
