/* generated by rust_qt_binding_generator */
#![allow(unknown_lints)]
#![allow(mutex_atomic, needless_pass_by_value)]
use libc::{c_int, c_void, uint8_t, uint16_t};
use std::slice;

use std::sync::{Arc, Mutex};
use std::ptr::null;

use implementation::*;


#[repr(C)]
pub struct COption<T> {
    data: T,
    some: bool,
}

impl<T> From<Option<T>> for COption<T> where T: Default {
    fn from(t: Option<T>) -> COption <T> {
        if let Some(v) = t {
            COption {
                data: v,
                some: true
            }
        } else {
            COption {
                data: T::default(),
                some: false
            }
        }
    }
}

#[repr(C)]
pub struct QString {
    data: *const uint8_t,
    len: c_int,
}

#[repr(C)]
pub struct QStringIn {
    data: *const uint16_t,
    len: c_int,
}

impl QStringIn {
    fn convert(&self) -> String {
        let data = unsafe { slice::from_raw_parts(self.data, self.len as usize) };
        String::from_utf16_lossy(data)
    }
}

impl<'a> From<&'a String> for QString {
    fn from(string: &'a String) -> QString {
        QString {
            len: string.len() as c_int,
            data: string.as_ptr(),
        }
    }
}

#[repr(C)]
pub struct QByteArray {
    data: *const uint8_t,
    len: c_int,
}

impl QByteArray {
    fn convert(&self) -> Vec<u8> {
        let data = unsafe { slice::from_raw_parts(self.data, self.len as usize) };
        Vec::from(data)
    }
}

impl<'a> From<&'a Vec<u8>> for QByteArray {
    fn from(value: &'a Vec<u8>) -> QByteArray {
        QByteArray {
            len: value.len() as c_int,
            data: value.as_ptr(),
        }
    }
}

#[repr(C)]
pub struct QModelIndex {
    row: c_int,
    internal_id: usize,
}

impl QModelIndex {
    fn invalid() -> QModelIndex {
        QModelIndex {
            row: -1,
            internal_id: 0,
        }
    }
    fn create(row: c_int, id: usize) -> QModelIndex {
        QModelIndex {
            row: row,
            internal_id: id,
        }
    }
}

#[repr(C)]
pub enum SortOrder {
    Ascending = 0,
    Descending = 1
}


pub struct PersonsQObject {}

#[derive (Clone)]
pub struct PersonsEmitter {
    qobject: Arc<Mutex<*const PersonsQObject>>,
    new_data_ready: fn(*const PersonsQObject),
}

unsafe impl Send for PersonsEmitter {}

impl PersonsEmitter {
    fn clear(&self) {
        *self.qobject.lock().unwrap() = null();
    }
    pub fn new_data_ready(&self) {
        let ptr = *self.qobject.lock().unwrap();
        if !ptr.is_null() {
            (self.new_data_ready)(ptr);
        }
    }
}

pub struct PersonsList {
    qobject: *const PersonsQObject,
    begin_reset_model: fn(*const PersonsQObject),
    end_reset_model: fn(*const PersonsQObject),
    begin_insert_rows: fn(*const PersonsQObject, usize, usize),
    end_insert_rows: fn(*const PersonsQObject),
    begin_remove_rows: fn(*const PersonsQObject, usize, usize),
    end_remove_rows: fn(*const PersonsQObject),
}

impl PersonsList {
    pub fn begin_reset_model(&self) {
        (self.begin_reset_model)(self.qobject);
    }
    pub fn end_reset_model(&self) {
        (self.end_reset_model)(self.qobject);
    }
    pub fn begin_insert_rows(&self, first: usize, last: usize) {
        (self.begin_insert_rows)(self.qobject, first, last);
    }
    pub fn end_insert_rows(&self) {
        (self.end_insert_rows)(self.qobject);
    }
    pub fn begin_remove_rows(&self, first: usize, last: usize) {
        (self.begin_remove_rows)(self.qobject, first, last);
    }
    pub fn end_remove_rows(&self) {
        (self.end_remove_rows)(self.qobject);
    }
}

pub trait PersonsTrait {
    fn create(emit: PersonsEmitter, model: PersonsList) -> Self;
    fn emit(&self) -> &PersonsEmitter;
    fn row_count(&self) -> usize;
    fn can_fetch_more(&self) -> bool { false }
    fn fetch_more(&mut self) {}
    fn sort(&mut self, u8, SortOrder) {}
    fn user_name(&self, item: usize) -> String;
    fn set_user_name(&mut self, item: usize, String) -> bool;
}

#[no_mangle]
pub extern "C" fn persons_new(qobject: *const PersonsQObject,
        new_data_ready: fn(*const PersonsQObject),
        begin_reset_model: fn(*const PersonsQObject),
        end_reset_model: fn(*const PersonsQObject),
        begin_insert_rows: fn(*const PersonsQObject,
            usize,
            usize),
        end_insert_rows: fn(*const PersonsQObject),
        begin_remove_rows: fn(*const PersonsQObject,
            usize,
            usize),
        end_remove_rows: fn(*const PersonsQObject))
        -> *mut Persons {
    let emit = PersonsEmitter {
        qobject: Arc::new(Mutex::new(qobject)),
        new_data_ready: new_data_ready,
    };
    let model = PersonsList {
        qobject: qobject,
        begin_reset_model: begin_reset_model,
        end_reset_model: end_reset_model,
        begin_insert_rows: begin_insert_rows,
        end_insert_rows: end_insert_rows,
        begin_remove_rows: begin_remove_rows,
        end_remove_rows: end_remove_rows,
    };
    let d = Persons::create(emit, model);
    Box::into_raw(Box::new(d))
}

#[no_mangle]
pub unsafe extern "C" fn persons_free(ptr: *mut Persons) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn persons_row_count(ptr: *const Persons) -> c_int {
    (&*ptr).row_count() as c_int
}
#[no_mangle]
pub unsafe extern "C" fn persons_can_fetch_more(ptr: *const Persons) -> bool {
    (&*ptr).can_fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn persons_fetch_more(ptr: *mut Persons) {
    (&mut *ptr).fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn persons_sort(ptr: *mut Persons, column: u8, order: SortOrder) {
    (&mut *ptr).sort(column, order)
}

#[no_mangle]
pub unsafe extern "C" fn persons_data_user_name(ptr: *const Persons, row: c_int,
        d: *mut c_void,
        set: fn(*mut c_void, QString)) {
    let data = (&*ptr).user_name(row as usize);
    set(d, QString::from(&data));
}

#[no_mangle]
pub unsafe extern "C" fn persons_set_data_user_name(ptr: *mut Persons, row: c_int, v: QStringIn) -> bool {
    (&mut *ptr).set_user_name(row as usize, v.convert())
}
